<!DOCTYPE html>
<html ng-app="app">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no,minimal-ui">
		<meta name="format-detection" content="telephone=no">
		<title>web-app-reader</title>
		<link rel="stylesheet" href="css/reset.css">
		<link rel="stylesheet" href="css/style.css">
	</head>
	<body>
		<div id="root" class="contaniner">
		    <div class="m-artical-action">
		    <div class="artical-action-mid" id="action_mid"></div>
		    </div>
		    <div id="top-nav" class="top-nav" style="display:none">
		        <div class="icon-back"></div>
		        <div class="nav-title">返回书架</div>
		    </div>
		    <div id="fition_chapter_title"></div>
		    <div id="fition_container" class="m-read-content">
		          

		    </div>
		    <div class="m-button-bar">
		        <ul class="u-tab">
		            <li id="prev_button">上一章</li>
		            <li id="next_button">下一章</li>
		        </ul>
		    </div>
		</div>
		<div class="nav-pannel-bk font-container" style="display:none"></div>
		<div class="nav-pannel font-container" style="display:none">
		    <div class="child-mod">
		        <span>字号</span>
		        <button id="large-font" class="font-size-button">大</button>
		        <button id="small-font" class="font-size-button">小</button>
		    </div>
		    <div class="child-mod" id="bk-container">
		        <span>背景</span>
		    </div>
		</div>
		<div id="footer_nav" class="footer-nav" style="display:none">
		        <ul>
		            <li>
		                <span class="tubiao mulu"></span>
		                <span class="wenzi">目录</span>
		            </li>
		            <li id="font-button">
		                <span class="tubiao ziti"></span>
		                <span class="wenzi">字体</span>
		            </li>
		            <li id="night-day">
		                <span class="tubiao night"></span>
		                <span class="wenzi">夜间</span>
		            </li>
		        </ul>
		</div>
		<script src="lib/zepto.min.js"></script>
		<script>
			window.jQuery = $;      /*这个$是zepto的$,目的是支持下面两个jq插件能正常使用*/
		</script>
		<script src="js/jquery.base64.js"></script>
		<script src="js/jquery.jsonp.js"></script>
		<script src="js/showTip.js"></script>

		<script>
			(function(){   /*生成一个闭包*/
		    'use strict'  //要使用es6必须在闭包的最开始做一个声明
			    var Util =(function(){  //内部类
			        var prefix = 'html5_reader_';
			        var StorageGetter = function(key){
			            return localStorage.getItem(prefix + key);
			        }
			        var StorageSetter = function(key,val){
			            return localStorage.setItem(prefix + key,val);
			        }
			        var getBSONP = function(url,callback){
			            return $.jsonp({
			                url : url,
			                cache:true,
			                callback:'duokan_fiction_chapter', //此callback非传参的callback
			                success: function(result){
			                    var data =$.base64.decode(result);//得到的是json数据
			                    var json = decodeURIComponent(escape(data));//js原生自带的方法
			                    callback(json);
			                }
			                
			            })
			        }
			        return{
			            getBSONP:getBSONP,
			            StorageGetter:StorageGetter,
			            StorageSetter:StorageSetter
			        }
			    })();

			    var Dom = {
			        top_nav :$('#top-nav'),
			        footer_nav :$('#footer_nav'),
			        font_button:$('#font-button'),
			        font_container:$('.font-container'),
			        bk_container:$('#bk-container'),
			        night_day:$('#night-day'),
			        font_night:$('#font_night'),
			        change_icon:$("#night-day .tubiao"),
			        change_text:$("#night-day .wenzi")
			        
			    }
			    var Win = $(window);
			    var Doc = $(document);
			    var readerModel;  //提出来变成全局变量(闭包范围内的全局)
			    var readerUI;
			    var RootContainer = $('#fition_container');
			    var initFontSize = Util.StorageGetter('font_size');
			    initFontSize = parseInt(initFontSize);
			    if(!initFontSize){
			        initFontSize = 16;
			    }
			    RootContainer.css('font_size',initFontSize);
			    
			   function BackGround(){
			      //字体和背景的颜色表
						var colorArr = [{
							value : '#f7eee5',
							name : '米白',
							font : ''
						}, {
							value : '#e9dfc7',
							name : '纸张',
							font : '',
							id : "font_normal"
						}, {
							value : '#a4a4a4',
							name : '浅灰',
							font : ''
						}, {
							value : '#cdefce',
							name : '护眼',
							font : ''
						}, {
							value : '#283548',
							name : '灰蓝',
							font : '#7685a2',
							bottomcolor : '#fff'
						}, {
							value : '#0f1410',
							name : '夜间',
							font : '#4e534f',
							bottomcolor : 'rgba(255,255,255,0.7)',
							id : "font_night"
						}];

						var bkCurColor = Util.StorageGetter('background_color');
						for(var i = 0;i<colorArr.length;i++){
						    var display = 'none';
						    if(bkCurColor == colorArr[i].value){
						        display ='';
						    }
						Dom.bk_container.append('<div class="bk-container" id="'+colorArr[i].id+ '"data-color="'+colorArr[i].value+'" style="background-color:'+colorArr[i].value +'"><div class="bk-container-current" style="display:'+display+'"></div><span style="display:none">'+colorArr[i].name+'</span></div>');
					}
		    	if (bkCurColor) {
							$('body').css('background-color', bkCurColor);
				}
			    if (bkCurColor == "#0f1410"){
			          show_day();		          
			    }
			   
			   }

				//todo 实现和阅读器相关的数据交互的方法(跟服务器相关的)			    
			    function ReaderModel(){			        
			        var Chapter_id;
			        var ChapterTotal;  //存总共的章节数
			        var init = function(UIcallback){
			            /*getFictionInfo(function(){  //先从chapter.json拿章节ID(Chapter_id)传到下面
			                getCurChapterContent(Chapter_id,function(data){ //然后接收ID去data.json系列拿内容
			                    //TODO...
			                    UIcallback && UIcallback(data);
			                });
			            })*/ 
			            getFictionInfoPromise().then(function(d){
			            	return getCurChapterContentPromise();  //注意加括号和不加括号的区别
			            }).then(function(data){   //function(data)等同下面resolve(data)
			            	UIcallback && UIcallback(data);
			            })

			        }
			       var getFictionInfo = function(callback){  //如果数据没有回调 那数据传给谁呢
			            $.get('data/chapter.json',function(data){
			                //TODO 获得章节信息之后的回调
			                Chapter_id = Util.StorageGetter('last_chapter_id');
			                if(Chapter_id == null){
			                     Chapter_id = data.chapters[1].chapter_id;
			                }
			                ChapterTotal = data.chapters.length;
			                callback && callback();
			            },'json');
			        }
			        //var getFictionInfoPromise = new Promise(function(resolve,reject){
			        //注意上下直接的区别 下面是调用的时候创建 上面是直接执行里面的内容
			        var getFictionInfoPromise = function(){
			        	return new Promise(function(resolve,reject){  //返回Promise实例对象
				        $.get('data/chapter.json',function(data){
			        		if(data.result == 0){
				        		Chapter_id = Util.StorageGetter('last_chapter_id');
				        		if (Chapter_id == null) {
				        			Chapter_id = data.chapters[1].chapter_id;
				        		}
				        		ChapterTotal = data.chapters.length;
				        		//callback && callback();
				        		resolve();
				        	}else{
			        			reject({msg:'fail'}); //失败可以自定义内容
			        		}	
				        },'json');				        		
			        	});
			        }
			        var getCurChapterContent = function(chapter_id,callback){
			            $.get('data/data' + chapter_id +'.json',function(data){
			                if(data.result == 0){
			                    var url =data.jsonp;
			                    Util.getBSONP(url,function(data){
			                        callback && callback(data);
			                    });
			                }
			            },'json')
			        }
			        var getCurChapterContentPromise = function(){
				        return new Promise(function(resolve,reject){
				        	$.get('data/data' + Chapter_id +'.json',function(data){
				        		if(data.result == 0){
				        			var url = data.jsonp;
				        			Util.getBSONP(url,function(data){
				        				//callback && callback(data);
				        				resolve(data); //代替callback函数
				        			})
				        		}else{
				        			reject();
				        		}
				        	},'json')
				        });
			        }

			        var gotoChapter = function(chapter_id,UIcallback){
						Chapter_id = chapter_id;
						getCurChapterContent(Chapter_id,UIcallback);
					};
			        var prevChapter = function(UIcallback){   //写完函数再写回调
			            Chapter_id = parseInt(Chapter_id,10);//因为Chapter_id是内部的全局变量 所以没必要当传参
			            if(Chapter_id == 1){
			            	RootContainer.toolTip({
			            		msg:"当前为第一章",
			            		arrow:false,
			            		css:{"z-index":"999","text-align":"center"}
			            	});
			                return; //不能上翻
			            }
			            Chapter_id -= 1;
			            //getCurChapterContent(Chapter_id,UIcallback);
			            gotoChapter(Chapter_id,UIcallback);
			            Util.StorageSetter('last_chapter_id',Chapter_id);			            
			        }
			         var nextChapter = function(UIcallback){
			            Chapter_id = parseInt(Chapter_id,10);
			            //if(Chapter_id == ChapterTotal){
			            if(Chapter_id >= 4){
			            	RootContainer.toolTip({
			            		msg:"当前为最后一章",
			            		arrow:false,
			            		css:{"z-index":"999","text-align":"center"}
			            	});
			                return;
			            }
			            Chapter_id += 1;
			            //getCurChapterContent(Chapter_id,UIcallback);
			            gotoChapter(Chapter_id,UIcallback);
			            Util.StorageSetter('last_chapter_id',Chapter_id);
			        }
			        return {             //把数据层的接口暴露给数据层以外的地方使用
			            init : init,
			            prevChapter : prevChapter,
			            nextChapter : nextChapter
			        }
			    }


			    //todo 渲染基本的UI结构
			    function ReaderBaseFrame(container){    
			        function parseChaperData(jsonData){
			            var jsonObj = JSON.parse(jsonData);
			            var html ='<h4>' + jsonObj.t + '</h4>';
			            for(var i = 0;i<jsonObj.p.length;i++){
			                html += "<p>" + jsonObj.p[i] +'</p>';
			            }
			            return html;
			        }
			        return function(data){
			            container.html(parseChaperData(data));
			        }
			    }

			    function show_day(){
			    	Dom.change_icon.removeClass('night').addClass('day');
			        Dom.change_text.text("白天");  //html()也可以喔

			    }

			    function show_night(){
			    	Dom.change_icon.removeClass('day').addClass('night');
			        Dom.change_text.text("夜间"); 
			    }

				 //todo 交互的事件绑定		    
			    function EventHanlder(){
			        //touch
			        //zepto tap
			        //4.0之前用click会有300ms延迟
			        //后面click和tap没区别
			        //tap在PC端必须打开模拟器才能响应
			        Dom.night_day.click(function(){
			            if($("#night-day .wenzi").text()=="夜间"){
			                show_day();
			                $('body').css('background-color', '#0f1410');
			                $('.bk-container>div').hide();
			                $('#font_night>.bk-container-current').show();
			                Util.StorageSetter('background_color','#0f1410');
			            }else{
			                show_night();
			                $('body').css('background-color', '#e9dfc7');
			                $('.bk-container>div').hide();
			                $('#font_normal>.bk-container-current').show();
			                Util.StorageSetter('background_color','#e9dfc7');
			            }
			            
			        });
			        $('#action_mid').click(function(){
			            if(Dom.top_nav.css('display') == 'none'){
			               Dom.footer_nav.show();
			               Dom.top_nav.show();
			            }else{
			               Dom.footer_nav.hide();
			               Dom.top_nav.hide();
			            }
			             Dom.font_container.hide();
			             Dom.font_button.removeClass('current');
			            });
			          Dom.font_button.click(function(){
			             if(Dom.font_container.css('display')=='none'){
			                 Dom.font_container.show();
			                 Dom.font_button.addClass('current');
			             }else{
			                  Dom.font_container.hide();
			                   Dom.font_button.removeClass('current');
			             }
			         });
			         
			         Dom.bk_container.delegate('.bk-container','click',function(){
			             var color = $(this).data('color');
			             if(color == "#0f1410"){
			             	show_day();
			             }else{
			             	show_night();
			             }
			             var font = $(this).data('font');
			             Dom.bk_container.find('.bk-container-current').hide();
			             $(this).find('.bk-container-current').show();
			             $('body').css('background-color',color);
			             Util.StorageSetter('background_color',color);
			         });
			         
			         $('#night-button').click(function(){
			             //TODO 触发背景切换事件
			         });
			         
			         $('#large-font').click(function(){
			             if(initFontSize>21){
			                 return;
			             }
			             initFontSize += 1;
			             RootContainer.css('font-size',initFontSize);
			             Util.StorageSetter('font_size',initFontSize);
			           }); 
			           
			          $('#small-font').click(function(){
			              if(initFontSize<15){
			                  return;
			              }
			             initFontSize -= 1;
			             RootContainer.css('font-size',initFontSize);
			             Util.StorageSetter('font_size',initFontSize);

			           }); 

			        //window对象上的scroll方法(jquery事件)
			      	Win.scroll(function(){
			          Dom.footer_nav.hide();
			          Dom.top_nav.hide();
			          Dom.font_container.hide();
			          Dom.font_button.removeClass('current');
			       });
			       
			       $('#prev_button').click(function(){
			           //TODO ...先获得章节的翻页数据->把数据拿来做渲染
			           readerModel.prevChapter(function(data){
			               readerUI(data);
			               document.body.scrollTop=0;
			               // $('window').scrollTop(0);
			               // $('body').scrollTop(0); 
			           });
			       });
			       
			       $('#next_button').click(function(){
			           //TODO ...先获得章节的翻页数据
				        readerModel.nextChapter(function(data){
				            readerUI(data);
				            document.body.scrollTop=0;
				        });
			       });
			            
			    }


			    //todo 整个项目的入口函数			    
			    function main(){
			        readerModel = ReaderModel();
			        console.log(readerModel);
			        readerUI = ReaderBaseFrame(RootContainer);
			        readerModel.init(function(data){
			            readerUI(data); 
			        });
			        EventHanlder();
			        BackGround();
			    }
			    
			    main();
			    			    			    
			})();
		</script>
	</body>
</html>
